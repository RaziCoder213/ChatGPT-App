name: CI

on: [push, workflow_dispatch]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Download Ngrok
      run: Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip

    - name: Extract Ngrok
      run: Expand-Archive ngrok.zip -DestinationPath ngrok

    - name: Authenticate Ngrok
      run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

    - name: Enable Remote Desktop
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1

    - name: Create RDP User
      run: |
        $password = ConvertTo-SecureString -AsPlainText "P@ssw0rd!3" -Force
        New-LocalUser -Name "admin" -Password $password -FullName "Runner Admin" -Description "RDP user"
        Add-LocalGroupMember -Group "Administrators" -Member "admin"

    - name: Set RDP Configurations
      run: echo "Set RDP configurations to 16GB RAM and 6th processor"
      # Note: Adjusting hardware configurations like RAM and CPU must be done outside of GitHub Actions and directly on the host or VM.

    - name: Start Ngrok Tunnel
      run: .\ngrok\ngrok.exe tcp 3389 > ngrok_output.log & Start-Sleep -Seconds 10

    - name: Get Ngrok Public URL
      run: |
        $output = Get-Content ngrok_output.log
        $matches = [regex]::Matches($output, 'tcp://[^\s]+')
        if ($matches.Count -gt 0) {
          $public_url = $matches[0].Value
          echo "Ngrok tunnel URL: $public_url"
        } else {
          echo "Failed to get Ngrok URL"
        }
